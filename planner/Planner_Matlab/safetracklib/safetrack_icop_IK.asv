%% safe tracking 
function [theta_new, success] = safetrack_icop_IK(theta0, robot, c1, M1)
    max_iteration = 1000;
    iteration_cnt = 1;
    quat_stepsize = 0.001;
    xyz_stepsize = 0.001;
    
    theta_old = theta0;
    [c0, rot0] = ForKine(theta0, robot.DH, robot.base, robot.Msix2target);
    M0 = axang2rotm([rot0 / norm(rot0), norm(rot0)]);
    quat1 = rotm2quat(M1);
    quat0 = rotm2quat(M0);
    dot_product = quat0 * quat1';
    angle = acos(min(max(2 * dot_product^2 - 1, -1.0), 1.0));
    quat_n = angle / quat_stepsize;
    quat_n = max(quat_n, 1);
    xyz_n = max(abs(c1 - c0)) / xyz_stepsize;
    xyz_n = max(xyz_n, 1);
    itp_n = max(quat_n, xyz_n);
    success = 0;
    for itp_idx=1:itp_n
        rate = itp_idx / itp_n;
        c_target = c0 + (c1 - c0) * rate;
        quat_target = slerp(quaternion(quat0), quaternion(quat1), rate);
        M_target = quat2rotm(quat_target);
        iteration_cnt = 1;
        success = 0;
        while(iteration_cnt <= max_iteration)
            iteration_cnt = iteration_cnt + 1;
            % update previous point
            
            theta_new = safetrack_icop(theta_old, robot, c_target, M_target);
        
            if size(theta_new, 1) == 0
                break;
            end
        
            [c_new, rot_new] = ForKine(theta_new, robot.DH, robot.base, robot.Msix2target);
            M_new = axang2rotm([rot_new / norm(rot_new), norm(rot_new)]);
        
            
            error_xyz = c_target-c_new;
        
            M_rel = M_target * M_new';
            axis_rel = rotm2axang(M_rel);
            error_RxRyRz = axis_rel(1:3) * axis_rel(4);
        
            if max(abs(error_xyz)) < 1e-3 && max(abs(error_RxRyRz)) < 1e-2
                success = 1;
                break
            end
        end
        if success == 0
            break;
        end
    end
end