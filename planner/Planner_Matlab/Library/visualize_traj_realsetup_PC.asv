function visualize_traj_realsetup(safe_theta, arr0, wp_pos)
robot=robotproperty('GP50');
robotCAD = load(strcat('figure/',robot.name,'.mat'));
scale = 1;
framen = 1;
[PC_origin, PC_idx] = load_PC(1);
[~, M_PC_0] = processPC(PC_origin, wp_pos(:,1));
arr0 = setVertice(arr0', M_PC_0^(-1))';
%% real calculation 
for cnt = 1:size(safe_theta,2) % pass the procedure from start to execute
%     disp(cnt);
    robot.DH(:,1) = safe_theta(:,cnt);
    
    M=CapPos_visual(robot);
    clf;
    hold on;

    handle=[];
    % workpiece
    if nargin >= 3
        [PC, M1, base_point, center_point] = processPC(PC_origin, wp_pos(:, cnt));
    else
        [PC, M1, base_point, center_point] = processPC(PC_origin);
    end
    
    

    for i=1:numel(robotCAD.workpiece)
        f=robotCAD.workpiece{i}.f; v=robotCAD.workpiece{i}.v.*scale; c=robotCAD.workpiece{i}.c; 
        color=[237,229,116]/255;
        v = setVertice(v,M1);
        handle.workpiece(i) = patch('Faces',f,'Vertices',v,'FaceVertexCData',c,'FaceColor',color,'EdgeColor','None', 'FaceAlpha',.3);
    end
    hold on;
    scatter3(base_point(1), base_point(2), base_point(3), 10, 'cyan', 'filled');
    hold on;
    scatter3(center_point(1), center_point(2), center_point(3), 10, 'r', 'filled');
    hold on;

    
    arr = setVertice(arr0', M1)';
%     visual_PC(PC, PC_idx);
% % % 
    % base
    for i=1:numel(robotCAD.base)
        f=robotCAD.base{i}.f; v=robotCAD.base{i}.v.*scale; c=robotCAD.base{i}.c; color=robotCAD.base{i}.color;
        for j=1:size(v,1) 
            v(j,:) = v(j,:);
        end
        v = setVertice(v,M{1});
        handle.base(i) = patch('Faces',f,'Vertices',v,'FaceVertexCData',c,'FaceColor',color,'EdgeColor','None');
    end
    % Link
    for i=1:5%length(robotCAD.link)
        v=robotCAD.link{i}.v.*scale; f=robotCAD.link{i}.f; c=robotCAD.link{i}.c; 
    %     color=robotCAD.link{i}.color;
        color=[249,212,35]/255;
        v = setVertice(v,M{i+1});
    %     v = FK(v,M{i+1}); 
    %     v = v';
        handle.link(i) = patch('Faces',f,'Vertices',v,'FaceVertexCData',c,'FaceColor',color,'EdgeColor','None');
    end

    
    [pos,M_0]=CapPos(robot.base,robot.DH,robot.cap);
    color = [rand rand rand];
    for i=1:6
        point1 = pos{i}.p(:,1);
        point2 = pos{i}.p(:,2);
        p = [point1, point2];
        plot3(p(1,:), p(2,:), p(3,:), '*-', 'Color',color);
        hold on;
    end

    %% draw capsule 
    valpha = 0.5;
    color = [255,255,243]/255;
    load(strcat('figure/', robot.name, 'Capsules_newtool2.mat'));
    boundary = RoBoundary;
    handle=[];
    n=min([size(M,2)-1, length(boundary)]);
    for i=1:n
        if i < n
            if isfield(boundary{i}, "X")
                X=boundary{i}.X;
                Y=boundary{i}.Y;
                Z=boundary{i}.Z;
                kd=size(X,1);jd=size(X,2);
                for k=1:kd
                    for j=1:jd
                        newvec=[X(k,j),Y(k,j),Z(k,j)]*M{i+1}(1:3,1:3)'+M{i+1}(1:3,4)';
                        X(k,j)=newvec(1);
                        Y(k,j)=newvec(2);
                        Z(k,j)=newvec(3);
                    end
                end
                handle(i)=surf(X,Y,Z,'FaceColor',color,'EdgeColor','None');
        %         handle(i)=surf(X,Y,Z);
                alpha(handle(i),valpha);
            end
        end
        if i == n
            for p = 1:3
                if isfield(boundary{i+p-1}, "X")
                    X=boundary{i+p-1}.X;
                    Y=boundary{i+p-1}.Y;
                    Z=boundary{i+p-1}.Z;
                    kd=size(X,1);jd=size(X,2);
                    for k=1:kd
                        for j=1:jd
                            newvec=[X(k,j),Y(k,j),Z(k,j)]*M{i+1}(1:3,1:3)'+M{i+1}(1:3,4)';
                            X(k,j)=newvec(1);
                            Y(k,j)=newvec(2);
                            Z(k,j)=newvec(3);
                        end
                    end
                    handle(i+p-1)=surf(X,Y,Z,'FaceColor',color,'EdgeColor','None');
            %         handle(i)=surf(X,Y,Z);
                    alpha(handle(i+p-1),valpha);
                end
            end
        end
    end

    
    %% plot weld point
    hold on 
    plot3(arr(1,:),arr(2,:),arr(3,:),'*-','color','b','lineWidth',2);
    
    %% draw the laser center 
    [laser, laser_rot] = ForKine(safe_theta(:,cnt), robot.DH, robot.base, robot.cap);
    hold on 
    plot3(laser(1),laser(2),laser(3),'*-','color','r','lineWidth',2)
    laser_rotM = axang2rotm([laser_rot / norm(laser_rot), norm(laser_rot)])
    vecX = [laser, laser + laser_rotM(:,1)];
    hold on 
    plot3(laser(1),laser(2),laser(3),'*-','color','r','lineWidth',2)
    hold on;
    %% draw env
    

    xlim=[-1,2.5];
    ylim=[-0.5,0.5];
    zlim=[0,2];
    view([1,-0.5,0.4]);
    axis equal
    axis([xlim,ylim,zlim]);
    lighting=camlight('left');
    %lighting phong
    set(gca,'Color',[0.8 0.8 0.8]);
    wall{1}.handle=fill3([xlim(1),xlim(1),xlim(2),xlim(2)],[ylim(1),ylim(2),ylim(2),ylim(1)],[zlim(1),zlim(1),zlim(1),zlim(1)],[63,64,64]/255);
%     wall{2}.handle=fill3([xlim(1),xlim(1),xlim(1),xlim(1)],[ylim(1),ylim(1),ylim(2),ylim(2)],[zlim(1),zlim(2),zlim(2),zlim(1)],[63,64,64]/255);
    wall{3}.handle=fill3([xlim(1),xlim(1),xlim(2),xlim(2)],[ylim(2),ylim(2),ylim(2),ylim(2)],[zlim(1),zlim(2),zlim(2),zlim(1)],[63,64,64]/255);
    zlabel('z axis');
    ylabel('y axis');
    xlabel('x axis');
    view(-20,3);

    F(framen) = getframe(gcf);
    framen = framen + 1;
%     if checkFeasible(safe_theta(:,cnt), PC, PC_idx, robot.DH, robot.base, robot.cap) == 0
%         break;
%     end
end

end